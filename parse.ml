type token =
  | IDENTIFIER of (string)
  | INT of (string)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | TRUE
  | FALSE
  | EQ_TOK
  | L_TOK
  | LE_TOK
  | B_TOK
  | BE_TOK
  | NOT
  | AND
  | OR
  | SKIP
  | SET
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PRINT
  | PPRINT
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | QUOTE
  | DECLAREINT
  | DECLAREPROTO
  | DECLAREBOOL
  | DECLARESTR
  | END
  | PERIOD
  | DOLLAR
  | READFROM
  | WRITETO
  | COPYFROM
  | SIZEOF
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"
(* 
 * Parser for PF language. 
 *)

open Pf		  

let error msg	= failwith msg

# 61 "parse.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* EQ_TOK *);
  267 (* L_TOK *);
  268 (* LE_TOK *);
  269 (* B_TOK *);
  270 (* BE_TOK *);
  271 (* NOT *);
  272 (* AND *);
  273 (* OR *);
  274 (* SKIP *);
  275 (* SET *);
  276 (* SEMICOLON *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* WHILE *);
  281 (* DO *);
  282 (* PRINT *);
  283 (* PPRINT *);
  284 (* LPAREN *);
  285 (* RPAREN *);
  286 (* LBRACE *);
  287 (* RBRACE *);
  288 (* LBRACK *);
  289 (* RBRACK *);
  290 (* QUOTE *);
  291 (* DECLAREINT *);
  292 (* DECLAREPROTO *);
  293 (* DECLAREBOOL *);
  294 (* DECLARESTR *);
  295 (* END *);
  296 (* PERIOD *);
  297 (* DOLLAR *);
  298 (* READFROM *);
  299 (* WRITETO *);
  300 (* COPYFROM *);
  301 (* SIZEOF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\004\000\004\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\001\000\008\000\006\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\002\000\005\000\008\000\003\000\006\000\003\000\003\000\005\000\
\008\000\005\000\002\000\003\000\002\000\002\000\002\000\010\000\
\005\000\005\000\007\000\010\000\005\000\008\000\007\000\009\000\
\006\000\008\000\003\000\001\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\013\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\035\000\000\000\037\000\
\000\000\038\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\001\000\000\000\
\000\000\000\000\054\000\041\000\042\000\000\000\000\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\053\000\011\000\
\000\000\000\000\040\000"

let yydgoto = "\002\000\
\012\000\097\000\027\000\028\000\099\000"

let yysindex = "\012\000\
\123\255\000\000\248\254\089\255\089\255\001\255\123\255\018\255\
\024\255\040\255\044\255\029\255\021\255\089\255\068\255\037\255\
\060\255\064\255\000\000\000\000\000\000\089\255\105\255\089\255\
\107\255\081\255\215\255\000\000\186\255\000\000\241\254\000\000\
\077\255\000\000\000\000\123\255\113\255\238\255\010\255\074\255\
\119\255\120\255\124\255\238\255\000\000\159\255\092\255\126\255\
\089\255\089\255\089\255\089\255\089\255\089\255\089\255\089\255\
\089\255\089\255\089\255\089\255\123\255\123\255\000\000\128\255\
\029\255\064\255\000\000\089\255\085\255\129\255\099\255\103\255\
\100\255\097\255\000\000\000\000\104\255\043\001\043\001\071\255\
\238\255\238\255\030\255\030\255\030\255\030\255\030\255\167\001\
\182\001\239\254\240\254\102\255\238\255\000\000\000\000\106\255\
\108\255\012\255\000\000\000\000\000\000\101\255\139\255\145\255\
\125\255\000\000\149\255\089\255\133\255\089\255\098\255\152\255\
\121\255\135\255\014\255\114\255\123\255\134\255\238\255\089\255\
\238\255\141\255\144\255\146\255\000\000\101\255\000\000\101\255\
\178\255\244\254\147\255\238\255\089\255\161\255\150\255\151\255\
\034\255\000\000\181\255\238\255\089\255\000\000\000\000\000\000\
\167\255\238\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\194\000\000\000\000\000\000\000\000\000\
\000\000\157\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\232\254\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\098\001\126\001\087\001\
\080\000\119\000\187\000\217\000\247\000\022\001\055\001\009\000\
\137\001\000\000\000\000\000\000\068\000\000\000\000\000\000\000\
\000\000\023\255\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\107\000\051\255\000\000\000\000\000\000\
\000\000\040\000\154\255\000\000\000\000\000\000\113\000\000\000\
\136\000\000\000\000\000\154\255\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\156\000\185\000\052\255\000\000\000\000\
\154\255\000\000\000\000\186\000\000\000\118\000\000\000\000\000\
\000\000\215\000\000\000"

let yygindex = "\000\000\
\014\000\160\255\002\000\011\000\241\255"

let yytablesize = 708
let yytable = "\040\000\
\028\000\030\000\036\000\036\000\036\000\113\000\029\000\036\000\
\021\000\031\000\014\000\013\000\001\000\063\000\123\000\038\000\
\052\000\013\000\032\000\028\000\031\000\105\000\106\000\044\000\
\033\000\046\000\138\000\074\000\068\000\135\000\110\000\136\000\
\015\000\016\000\017\000\052\000\053\000\030\000\020\000\026\000\
\034\000\069\000\127\000\111\000\035\000\128\000\013\000\067\000\
\036\000\065\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\144\000\052\000\
\037\000\128\000\026\000\045\000\039\000\093\000\041\000\013\000\
\013\000\032\000\090\000\091\000\052\000\053\000\029\000\008\000\
\054\000\055\000\056\000\057\000\058\000\094\000\095\000\096\000\
\116\000\018\000\019\000\053\000\053\000\042\000\029\000\027\000\
\020\000\021\000\094\000\095\000\122\000\094\000\095\000\022\000\
\043\000\045\000\049\000\047\000\048\000\119\000\064\000\121\000\
\047\000\066\000\070\000\023\000\024\000\027\000\009\000\071\000\
\072\000\132\000\025\000\003\000\073\000\076\000\077\000\013\000\
\092\000\098\000\130\000\102\000\100\000\026\000\140\000\043\000\
\101\000\103\000\108\000\114\000\109\000\107\000\146\000\004\000\
\104\000\115\000\005\000\117\000\006\000\118\000\007\000\120\000\
\124\000\125\000\129\000\046\000\004\000\008\000\009\000\010\000\
\011\000\049\000\050\000\051\000\052\000\053\000\126\000\131\000\
\054\000\055\000\056\000\057\000\058\000\133\000\059\000\060\000\
\134\000\128\000\137\000\141\000\139\000\145\000\142\000\143\000\
\050\000\048\000\015\000\075\000\049\000\050\000\051\000\052\000\
\053\000\055\000\052\000\054\000\055\000\056\000\057\000\058\000\
\147\000\059\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\000\000\000\000\044\000\000\000\
\017\000\049\000\050\000\051\000\052\000\053\000\000\000\000\000\
\054\000\055\000\056\000\057\000\058\000\000\000\059\000\060\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\049\000\050\000\051\000\052\000\053\000\000\000\016\000\054\000\
\055\000\056\000\057\000\058\000\000\000\059\000\060\000\000\000\
\000\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\000\000\
\028\000\028\000\000\000\000\000\028\000\018\000\028\000\000\000\
\021\000\028\000\000\000\000\000\021\000\028\000\021\000\000\000\
\000\000\021\000\000\000\000\000\000\000\021\000\031\000\028\000\
\000\000\052\000\026\000\026\000\026\000\026\000\026\000\021\000\
\031\000\026\000\026\000\026\000\026\000\026\000\019\000\026\000\
\026\000\030\000\020\000\026\000\020\000\026\000\000\000\020\000\
\026\000\000\000\030\000\020\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\020\000\026\000\000\000\
\052\000\029\000\029\000\029\000\029\000\029\000\007\000\045\000\
\029\000\029\000\029\000\029\000\029\000\032\000\029\000\029\000\
\045\000\005\000\029\000\008\000\029\000\008\000\032\000\029\000\
\008\000\000\000\045\000\029\000\008\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\029\000\008\000\053\000\
\027\000\027\000\027\000\027\000\027\000\006\000\049\000\027\000\
\027\000\027\000\027\000\027\000\047\000\027\000\027\000\049\000\
\022\000\027\000\009\000\027\000\009\000\047\000\027\000\009\000\
\000\000\049\000\027\000\009\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\043\000\027\000\009\000\053\000\004\000\
\004\000\004\000\004\000\004\000\043\000\000\000\004\000\004\000\
\004\000\004\000\004\000\000\000\004\000\004\000\043\000\046\000\
\004\000\000\000\004\000\000\000\000\000\004\000\000\000\000\000\
\046\000\004\000\000\000\000\000\000\000\015\000\015\000\015\000\
\000\000\000\000\046\000\004\000\015\000\015\000\015\000\015\000\
\015\000\000\000\015\000\015\000\050\000\048\000\015\000\000\000\
\015\000\000\000\000\000\015\000\000\000\050\000\048\000\015\000\
\000\000\000\000\000\000\017\000\017\000\017\000\000\000\050\000\
\048\000\015\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\017\000\044\000\000\000\017\000\000\000\017\000\000\000\
\000\000\017\000\000\000\044\000\000\000\017\000\000\000\000\000\
\000\000\016\000\016\000\016\000\000\000\044\000\000\000\017\000\
\016\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\000\000\000\000\016\000\000\000\016\000\000\000\000\000\016\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\000\000\000\000\016\000\000\000\018\000\
\018\000\018\000\018\000\018\000\000\000\018\000\018\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\018\000\051\000\
\052\000\053\000\018\000\000\000\054\000\055\000\056\000\057\000\
\058\000\019\000\019\000\019\000\018\000\000\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\000\000\019\000\019\000\
\000\000\000\000\019\000\000\000\019\000\000\000\000\000\019\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\005\000\007\000\007\000\
\000\000\000\000\007\000\000\000\007\000\000\000\000\000\007\000\
\000\000\005\000\005\000\007\000\000\000\005\000\000\000\005\000\
\000\000\000\000\005\000\000\000\000\000\007\000\005\000\000\000\
\006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\006\000\006\000\000\000\
\000\000\006\000\000\000\006\000\000\000\000\000\006\000\000\000\
\022\000\022\000\006\000\000\000\022\000\000\000\022\000\000\000\
\000\000\022\000\000\000\000\000\006\000\022\000\000\000\000\000\
\000\000\049\000\050\000\051\000\052\000\053\000\000\000\022\000\
\054\000\055\000\056\000\057\000\058\000\000\000\000\000\060\000\
\049\000\050\000\051\000\052\000\053\000\000\000\000\000\054\000\
\055\000\056\000\057\000\058\000"

let yycheck = "\015\000\
\000\000\001\001\020\001\020\001\020\001\102\000\005\000\020\001\
\000\000\000\000\019\001\001\000\001\000\029\001\111\000\014\000\
\041\001\007\000\001\001\044\001\007\000\039\001\039\001\022\000\
\001\001\024\000\039\001\043\000\019\001\126\000\019\001\128\000\
\041\001\042\001\043\001\006\001\007\001\000\000\000\000\000\000\
\001\001\032\001\029\001\032\001\001\001\032\001\036\000\037\000\
\020\001\036\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\029\001\041\001\
\044\001\032\001\044\001\000\000\001\001\068\000\034\001\061\000\
\062\000\000\000\061\000\062\000\006\001\007\001\000\000\000\000\
\010\001\011\001\012\001\013\001\014\001\001\001\002\001\003\001\
\104\000\001\001\002\001\041\001\041\001\034\001\044\001\044\001\
\008\001\009\001\001\001\002\001\003\001\001\001\002\001\015\001\
\041\001\001\001\000\000\001\001\028\001\108\000\034\001\110\000\
\000\000\001\001\041\001\027\001\028\001\000\000\000\000\001\001\
\001\001\120\000\034\001\001\001\001\001\034\001\001\001\117\000\
\001\001\001\001\117\000\032\001\034\001\045\001\133\000\000\000\
\034\001\041\001\033\001\001\001\033\001\040\001\141\000\021\001\
\041\001\001\001\024\001\023\001\026\001\001\001\028\001\019\001\
\001\001\033\001\041\001\000\000\000\000\035\001\036\001\037\001\
\038\001\003\001\004\001\005\001\006\001\007\001\032\001\034\001\
\010\001\011\001\012\001\013\001\014\001\033\001\016\001\017\001\
\033\001\032\001\001\001\019\001\034\001\001\001\033\001\033\001\
\000\000\000\000\000\000\029\001\003\001\004\001\005\001\006\001\
\007\001\000\000\041\001\010\001\011\001\012\001\013\001\014\001\
\034\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\000\000\255\255\
\000\000\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\003\001\004\001\005\001\006\001\007\001\255\255\000\000\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\020\001\000\000\022\001\255\255\
\016\001\025\001\255\255\255\255\020\001\029\001\022\001\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\029\001\039\001\
\255\255\041\001\003\001\004\001\005\001\006\001\007\001\039\001\
\039\001\010\001\011\001\012\001\013\001\014\001\000\000\016\001\
\017\001\020\001\020\001\020\001\022\001\022\001\255\255\025\001\
\025\001\255\255\029\001\029\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\039\001\039\001\255\255\
\041\001\003\001\004\001\005\001\006\001\007\001\000\000\020\001\
\010\001\011\001\012\001\013\001\014\001\020\001\016\001\017\001\
\029\001\000\000\020\001\020\001\022\001\022\001\029\001\025\001\
\025\001\255\255\039\001\029\001\029\001\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\039\001\039\001\041\001\
\003\001\004\001\005\001\006\001\007\001\000\000\020\001\010\001\
\011\001\012\001\013\001\014\001\020\001\016\001\017\001\029\001\
\000\000\020\001\020\001\022\001\022\001\029\001\025\001\025\001\
\255\255\039\001\029\001\029\001\255\255\255\255\255\255\039\001\
\255\255\255\255\255\255\020\001\039\001\039\001\041\001\003\001\
\004\001\005\001\006\001\007\001\029\001\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\039\001\020\001\
\020\001\255\255\022\001\255\255\255\255\025\001\255\255\255\255\
\029\001\029\001\255\255\255\255\255\255\003\001\004\001\005\001\
\255\255\255\255\039\001\039\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\020\001\020\001\020\001\255\255\
\022\001\255\255\255\255\025\001\255\255\029\001\029\001\029\001\
\255\255\255\255\255\255\003\001\004\001\005\001\255\255\039\001\
\039\001\039\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\020\001\255\255\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\029\001\255\255\029\001\255\255\255\255\
\255\255\003\001\004\001\005\001\255\255\039\001\255\255\039\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\255\255\255\255\020\001\255\255\022\001\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\003\001\004\001\005\001\255\255\255\255\039\001\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\255\255\
\255\255\020\001\255\255\022\001\255\255\255\255\025\001\005\001\
\006\001\007\001\029\001\255\255\010\001\011\001\012\001\013\001\
\014\001\003\001\004\001\005\001\039\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\255\255\255\255\020\001\255\255\022\001\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\003\001\004\001\005\001\255\255\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\004\001\016\001\017\001\
\255\255\255\255\020\001\255\255\022\001\255\255\255\255\025\001\
\255\255\016\001\017\001\029\001\255\255\020\001\255\255\022\001\
\255\255\255\255\025\001\255\255\255\255\039\001\029\001\255\255\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\016\001\017\001\255\255\
\255\255\020\001\255\255\022\001\255\255\255\255\025\001\255\255\
\016\001\017\001\029\001\255\255\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\039\001\029\001\255\255\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\039\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  TRUE\000\
  FALSE\000\
  EQ_TOK\000\
  L_TOK\000\
  LE_TOK\000\
  B_TOK\000\
  BE_TOK\000\
  NOT\000\
  AND\000\
  OR\000\
  SKIP\000\
  SET\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  PRINT\000\
  PPRINT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  QUOTE\000\
  DECLAREINT\000\
  DECLAREPROTO\000\
  DECLAREBOOL\000\
  DECLARESTR\000\
  END\000\
  PERIOD\000\
  DOLLAR\000\
  READFROM\000\
  WRITETO\000\
  COPYFROM\000\
  SIZEOF\000\
  EOF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parse.mly"
                (IndexConst(_1))
# 443 "parse.ml"
               : 'index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parse.mly"
                 (IndexIden(_1))
# 450 "parse.ml"
               : 'index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parse.mly"
                                            ( Const(_1) )
# 457 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parse.mly"
                                             ( Var _1)
# 464 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 85 "parse.mly"
                                           ( Add (_1,_3) )
# 472 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 86 "parse.mly"
                                           ( Sub (_1,_3) )
# 480 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 87 "parse.mly"
                                           ( Mul (_1,_3) )
# 488 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 88 "parse.mly"
                                           ( Div (_1,_3) )
# 496 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 89 "parse.mly"
                                           ( Mod (_1,_3) )
# 504 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pro_ele) in
    Obj.repr(
# 90 "parse.mly"
                                             ( Protoele _1)
# 511 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp_inside) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 91 "parse.mly"
                                                                       (  Sizeof1(_3,_5,_7) )
# 520 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 92 "parse.mly"
                                                     (  Sizeof2(_3,_5) )
# 528 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parse.mly"
                                        ( True )
# 534 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parse.mly"
                                             ( False )
# 540 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 95 "parse.mly"
                                           ( EQ (_1,_3) )
# 548 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 96 "parse.mly"
                                           ( LE(_1,_3) )
# 556 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 97 "parse.mly"
                                           ( L(_1,_3) )
# 564 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 98 "parse.mly"
                                           ( B(_1,_3) )
# 572 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 99 "parse.mly"
                                           ( BE(_1,_3) )
# 580 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 100 "parse.mly"
                                            ( Not(_2) )
# 587 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 101 "parse.mly"
                                           ( And(_1,_3)  )
# 595 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 102 "parse.mly"
                                           ( Or(_1,_3) )
# 603 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 103 "parse.mly"
                                            ( _2 )
# 610 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 104 "parse.mly"
                                             ( Str(_2) )
# 617 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parse.mly"
                                             ( PPrint(_2) )
# 624 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parse.mly"
                                                                      (     AccessProto1(_1,_3,_5) )
# 633 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    Obj.repr(
# 110 "parse.mly"
                                                                        (     AccessProto2(_1,_3,_5,_7) )
# 643 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parse.mly"
                                                     ( AccessProto3(_1,_3) )
# 651 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    Obj.repr(
# 112 "parse.mly"
                                                   ( AccessProto4(_1,_3,_5) )
# 660 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 116 "parse.mly"
                                             ( Set(_1,_3) )
# 668 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pf.com) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pf.com) in
    Obj.repr(
# 118 "parse.mly"
                                             ( Seq(_1,_3) )
# 676 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 119 "parse.mly"
                             ( If(_2,_4) )
# 684 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Pf.com) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 120 "parse.mly"
                                             ( Ifelse(_2,_4,_7) )
# 693 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 121 "parse.mly"
                                             ( While(_2,_4) )
# 701 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parse.mly"
                                             ( Print(_2) )
# 708 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 123 "parse.mly"
                                             ( _2 )
# 715 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parse.mly"
                               ( Declareint(_2) )
# 722 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parse.mly"
                                             ( Declarebool(_2) )
# 729 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parse.mly"
                                             ( Declarestr(_2) )
# 736 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 128 "parse.mly"
                                                                                          ( Declareproto(_2,_4,_6,_9) )
# 746 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 129 "parse.mly"
                                                ( Readfrom(_1,_4) )
# 754 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 130 "parse.mly"
                                                ( Writeto(_1,_4) )
# 762 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 132 "parse.mly"
                                                                                  ( SetProto1(_1,_3,_5,_7) )
# 772 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'index) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 133 "parse.mly"
                                                                                ( SetProto2(_1,_3,_5,_7,_10) )
# 783 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 134 "parse.mly"
                                                                       ( SetProto3(_1,_3,_5) )
# 792 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'index) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 135 "parse.mly"
                                                                         ( SetProto4(_1,_3,_5,_8) )
# 802 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 137 "parse.mly"
                                                      (AddEle1(_1,_3,_7))
# 811 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 138 "parse.mly"
                                                                        (AddEle2(_1,_3,_5,_9))
# 821 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 139 "parse.mly"
                                                  (AddEle3(_1,_3))
# 829 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 140 "parse.mly"
                                                                     (AddEle4(_1,_3,_5))
# 838 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pro_ele) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pro_ele) in
    Obj.repr(
# 141 "parse.mly"
                           ( Copyfrom(_1,_3) )
# 846 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parse.mly"
              ( ExpEle1 _1 )
# 853 "parse.ml"
               : 'exp_inside))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    Obj.repr(
# 147 "parse.mly"
                                  ( ExpEle2 (_1, _3) )
# 861 "parse.ml"
               : 'exp_inside))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp_inside) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_inside) in
    Obj.repr(
# 148 "parse.mly"
                                       ( ExpEle3 (_1, _3) )
# 869 "parse.ml"
               : 'exp_inside))
(* Entry com *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let com (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pf.com)
