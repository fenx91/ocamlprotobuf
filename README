In this project, I implement a new programming language, PF, to manipulate Protobuf data directly.

PF is a new language aiming to facilitate the data operations with Protobuf and to provide an intuitive idea of how to work with it. 
It treats Protobuf objects as its fundamental element and provides built-in operators and functions to operate on these objects. 
The main target of designing PF is to make working with Protobuf data much easier. 
When we are using PF, we do not need to differentiate the different access methods to handle different fields of a Protobuf data. 

In the report, the language reference manual of my language PF is provided and some example programs are given to test the feature of this language.

______________________________

Program Execution

To work with protocol buffers, you should install the Protobuf compiler protoc first. Since the PF compiles pf codes to C++, you need to run protoc to compile the .proto files to C++ classes first. 

The testfiles have protoc .proto files needed already.

PF includes two scripts which allow you to compile and run PF program easily. 

To compile and run a PF program, run the following script:

./PF.sh <file_name>.pf

If there is no ./pf file, it will execute make automatically.

Then if there is any parse error then the compilation process fails and the script displays parse error. If there is any type error then the compilation process fails and the script displays the corresponding type checking error. If the program compiling correctly, the script displays Ocaml to c++ succeeded.

After compiling the program successfully, it will generate <file_name>.cpp and then you can use the g++ to compile and then run the program. Here, you need to provide the when you use g++ to compiling the program.

Alternatively, you can use the following script on the test programs:

./PF_test.sh <file_name>.pf

Besides the errors listed above, if there is any error during running the c++ code, the script displays these errors. 

If it runs successfully, it will generate <file_name>.output files and print the result on the script directly.

You can run ./PF clean to remove all the *.cpp *.out *.output files and also it will execute make clean.  

Thank you!

