type token =
  | IDENTIFIER of (string)
  | INT of (string)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | TRUE
  | FALSE
  | EQ_TOK
  | L_TOK
  | LE_TOK
  | B_TOK
  | BE_TOK
  | NOT
  | AND
  | OR
  | SKIP
  | SET
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PRINT
  | PPRINT
  | LPAREN
  | COPYFROM
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | QUOTE
  | DECLAREINT
  | DECLAREPROTO
  | DECLAREBOOL
  | DECLARESTR
  | END
  | PERIOD
  | DOLLAR
  | QUESTION
  | READFROM
  | WRITETO
  | SIZEOF
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"
(* 
 * Parser for PF language. 
 *)

open Pf		  

let error msg	= failwith msg

# 62 "parse.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* EQ_TOK *);
  267 (* L_TOK *);
  268 (* LE_TOK *);
  269 (* B_TOK *);
  270 (* BE_TOK *);
  271 (* NOT *);
  272 (* AND *);
  273 (* OR *);
  274 (* SKIP *);
  275 (* SET *);
  276 (* SEMICOLON *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* WHILE *);
  281 (* DO *);
  282 (* PRINT *);
  283 (* PPRINT *);
  284 (* LPAREN *);
  285 (* COPYFROM *);
  286 (* RPAREN *);
  287 (* LBRACE *);
  288 (* RBRACE *);
  289 (* LBRACK *);
  290 (* RBRACK *);
  291 (* QUOTE *);
  292 (* DECLAREINT *);
  293 (* DECLAREPROTO *);
  294 (* DECLAREBOOL *);
  295 (* DECLARESTR *);
  296 (* END *);
  297 (* PERIOD *);
  298 (* DOLLAR *);
  299 (* QUESTION *);
  300 (* READFROM *);
  301 (* WRITETO *);
  302 (* SIZEOF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\004\000\004\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\005\000\005\000\005\000\
\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\001\000\008\000\006\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\002\000\006\000\004\000\005\000\008\000\003\000\006\000\003\000\
\003\000\005\000\008\000\005\000\002\000\003\000\002\000\002\000\
\002\000\010\000\005\000\005\000\007\000\010\000\005\000\008\000\
\007\000\009\000\006\000\008\000\003\000\001\000\004\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\003\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\025\000\
\000\000\000\000\000\000\039\000\000\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\023\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\001\000\000\000\000\000\000\000\056\000\043\000\044\000\000\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\055\000\011\000\000\000\
\000\000\000\000\000\000\000\000\042\000"

let yydgoto = "\002\000\
\019\000\099\000\020\000\021\000\101\000"

let yysindex = "\038\000\
\068\255\000\000\241\254\000\000\000\000\000\000\110\255\110\255\
\110\255\004\255\042\255\068\255\058\255\060\255\077\255\079\255\
\087\255\062\255\071\255\063\002\000\000\110\255\092\255\063\255\
\064\255\055\255\110\255\119\002\099\002\083\002\000\000\000\000\
\243\254\226\255\067\255\000\000\073\255\000\000\000\000\100\255\
\068\255\110\255\110\255\110\255\110\255\110\255\110\255\110\255\
\110\255\110\255\110\255\110\255\110\255\109\255\119\002\245\254\
\074\255\112\255\119\255\122\255\048\002\068\255\068\255\000\000\
\000\000\000\000\123\255\088\255\071\255\121\255\121\255\140\255\
\119\002\119\002\057\255\057\255\057\255\057\255\057\255\134\002\
\149\002\000\000\110\255\072\255\000\000\135\255\104\255\107\255\
\248\254\101\255\250\254\000\255\103\255\147\255\119\002\000\000\
\000\000\124\255\125\255\246\254\000\000\000\000\000\000\066\255\
\154\255\134\255\000\000\166\255\229\254\118\255\110\255\149\255\
\110\255\083\255\000\000\173\255\143\255\029\255\068\255\144\255\
\000\000\066\255\177\255\119\002\110\255\119\002\146\255\148\255\
\150\255\000\000\066\255\018\255\151\255\153\255\247\254\119\002\
\110\255\162\255\156\255\000\000\183\255\000\000\000\000\119\002\
\110\255\000\000\158\255\119\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\027\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\185\000\000\000\000\000\000\000\000\000\000\000\
\000\000\161\000\000\000\185\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\159\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\117\001\145\001\089\001\
\198\001\210\001\192\000\223\000\254\000\029\001\060\001\179\001\
\162\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\192\255\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\000\000\152\255\000\000\060\000\241\001\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\082\000\000\000\000\000\
\152\255\081\000\000\000\000\000\000\000\000\000\152\255\100\000\
\109\000\006\002\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\121\000\000\000\211\000\000\000"

let yygindex = "\000\000\
\003\000\170\255\004\000\000\000\233\255"

let yytablesize = 931
let yytable = "\057\000\
\030\000\032\000\121\000\022\000\031\000\122\000\041\000\083\000\
\113\000\033\000\028\000\029\000\030\000\041\000\033\000\034\000\
\064\000\117\000\047\000\041\000\143\000\084\000\114\000\122\000\
\104\000\055\000\023\000\128\000\024\000\025\000\061\000\085\000\
\115\000\106\000\085\000\134\000\090\000\041\000\001\000\107\000\
\028\000\034\000\032\000\069\000\139\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\140\000\035\000\051\000\036\000\131\000\045\000\046\000\
\091\000\092\000\096\000\097\000\003\000\004\000\110\000\115\000\
\096\000\097\000\098\000\005\000\006\000\037\000\049\000\038\000\
\031\000\045\000\007\000\096\000\097\000\127\000\095\000\039\000\
\008\000\040\000\041\000\009\000\056\000\010\000\011\000\012\000\
\060\000\058\000\059\000\048\000\068\000\066\000\013\000\014\000\
\015\000\016\000\017\000\067\000\052\000\082\000\026\000\004\000\
\087\000\018\000\124\000\086\000\126\000\005\000\006\000\088\000\
\029\000\132\000\089\000\093\000\007\000\044\000\045\000\046\000\
\136\000\094\000\047\000\048\000\049\000\050\000\051\000\100\000\
\011\000\027\000\102\000\050\000\144\000\103\000\105\000\108\000\
\013\000\045\000\046\000\109\000\148\000\047\000\048\000\049\000\
\050\000\051\000\118\000\018\000\119\000\111\000\112\000\123\000\
\004\000\030\000\030\000\030\000\030\000\030\000\120\000\125\000\
\030\000\030\000\030\000\030\000\030\000\129\000\030\000\030\000\
\130\000\135\000\133\000\137\000\145\000\138\000\122\000\147\000\
\057\000\141\000\142\000\030\000\030\000\146\000\000\000\015\000\
\149\000\054\000\028\000\028\000\028\000\028\000\028\000\000\000\
\054\000\028\000\028\000\028\000\028\000\028\000\000\000\028\000\
\028\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\028\000\017\000\000\000\
\000\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000\
\046\000\054\000\000\000\047\000\048\000\049\000\050\000\051\000\
\000\000\052\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\054\000\065\000\
\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
\000\000\000\000\030\000\030\000\030\000\030\000\030\000\000\000\
\030\000\030\000\000\000\000\000\030\000\032\000\030\000\000\000\
\000\000\030\000\000\000\000\000\018\000\030\000\030\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\033\000\
\030\000\032\000\054\000\028\000\028\000\028\000\028\000\028\000\
\047\000\033\000\028\000\028\000\028\000\028\000\028\000\000\000\
\028\000\028\000\047\000\019\000\028\000\034\000\028\000\000\000\
\000\000\028\000\000\000\000\000\000\000\028\000\028\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\028\000\034\000\054\000\031\000\031\000\031\000\031\000\031\000\
\007\000\051\000\031\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\049\000\051\000\031\000\045\000\031\000\000\000\
\000\000\031\000\000\000\000\000\049\000\031\000\031\000\045\000\
\000\000\000\000\000\000\000\000\005\000\000\000\049\000\048\000\
\031\000\045\000\055\000\029\000\029\000\029\000\029\000\029\000\
\052\000\048\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\052\000\048\000\029\000\000\000\029\000\000\000\
\006\000\029\000\000\000\000\000\052\000\029\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\029\000\022\000\055\000\004\000\004\000\004\000\004\000\004\000\
\000\000\050\000\004\000\004\000\004\000\004\000\004\000\000\000\
\004\000\004\000\021\000\050\000\004\000\000\000\004\000\000\000\
\020\000\004\000\000\000\000\000\000\000\004\000\004\000\000\000\
\000\000\000\000\015\000\015\000\015\000\008\000\000\000\000\000\
\004\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\015\000\009\000\000\000\015\000\000\000\015\000\000\000\000\000\
\015\000\000\000\000\000\000\000\015\000\015\000\000\000\000\000\
\000\000\017\000\017\000\017\000\000\000\000\000\046\000\015\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\046\000\000\000\017\000\000\000\017\000\000\000\000\000\017\000\
\000\000\000\000\046\000\017\000\017\000\000\000\000\000\000\000\
\016\000\016\000\016\000\000\000\000\000\000\000\017\000\016\000\
\016\000\016\000\016\000\016\000\000\000\016\000\016\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\016\000\000\000\
\000\000\000\000\016\000\016\000\000\000\000\000\000\000\018\000\
\018\000\018\000\000\000\000\000\000\000\016\000\018\000\018\000\
\018\000\018\000\018\000\000\000\018\000\018\000\000\000\000\000\
\018\000\000\000\018\000\000\000\000\000\018\000\000\000\000\000\
\000\000\018\000\018\000\000\000\000\000\000\000\019\000\019\000\
\019\000\000\000\000\000\000\000\018\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\000\000\019\000\000\000\000\000\019\000\000\000\000\000\000\000\
\019\000\019\000\000\000\007\000\007\000\007\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\007\000\007\000\000\000\000\000\007\000\000\000\007\000\000\000\
\000\000\007\000\000\000\000\000\000\000\007\000\007\000\005\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\005\000\005\000\000\000\000\000\
\005\000\000\000\005\000\000\000\000\000\005\000\000\000\000\000\
\000\000\005\000\005\000\006\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\006\000\006\000\000\000\000\000\006\000\000\000\006\000\000\000\
\000\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\
\000\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\
\006\000\000\000\022\000\000\000\000\000\000\000\022\000\022\000\
\000\000\000\000\021\000\000\000\000\000\000\000\021\000\000\000\
\021\000\022\000\000\000\021\000\020\000\000\000\020\000\021\000\
\021\000\020\000\000\000\000\000\000\000\020\000\020\000\000\000\
\000\000\008\000\021\000\008\000\000\000\000\000\008\000\000\000\
\020\000\000\000\008\000\008\000\000\000\009\000\000\000\009\000\
\000\000\000\000\009\000\000\000\000\000\008\000\009\000\009\000\
\000\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\
\000\000\009\000\031\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\031\000\031\000\029\000\
\029\000\029\000\029\000\029\000\000\000\029\000\029\000\000\000\
\000\000\000\000\055\000\000\000\000\000\004\000\004\000\004\000\
\004\000\004\000\029\000\029\000\004\000\004\000\004\000\004\000\
\004\000\000\000\004\000\004\000\000\000\000\000\000\000\055\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\004\000\
\004\000\047\000\048\000\049\000\050\000\051\000\000\000\052\000\
\053\000\042\000\043\000\044\000\045\000\046\000\000\000\000\000\
\047\000\048\000\049\000\050\000\051\000\065\000\052\000\053\000\
\000\000\000\000\000\000\000\000\000\000\042\000\043\000\044\000\
\045\000\046\000\000\000\054\000\047\000\048\000\049\000\050\000\
\051\000\000\000\052\000\053\000\000\000\042\000\043\000\044\000\
\045\000\046\000\000\000\063\000\047\000\048\000\049\000\050\000\
\051\000\000\000\052\000\053\000\000\000\000\000\000\000\000\000\
\062\000\042\000\043\000\044\000\045\000\046\000\000\000\000\000\
\047\000\048\000\049\000\050\000\051\000\000\000\052\000\053\000\
\042\000\043\000\044\000\045\000\046\000\000\000\000\000\047\000\
\048\000\049\000\050\000\051\000\000\000\000\000\053\000\042\000\
\043\000\044\000\045\000\046\000\000\000\000\000\047\000\048\000\
\049\000\050\000\051\000"

let yycheck = "\023\000\
\000\000\000\000\030\001\019\001\001\001\033\001\020\001\019\001\
\019\001\000\000\007\000\008\000\009\000\020\001\012\000\012\000\
\030\001\104\000\000\000\020\001\030\001\033\001\033\001\033\001\
\033\001\022\000\042\001\114\000\044\001\045\001\027\000\043\001\
\043\001\040\001\043\001\122\000\060\000\020\001\001\000\040\001\
\000\000\000\000\001\001\041\000\131\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\040\001\001\001\000\000\001\001\033\001\006\001\007\001\
\062\000\063\000\001\001\002\001\001\001\002\001\094\000\043\001\
\001\001\002\001\003\001\008\001\009\001\001\001\000\000\001\001\
\000\000\000\000\015\001\001\001\002\001\003\001\083\000\001\001\
\021\001\028\001\020\001\024\001\001\001\026\001\027\001\028\001\
\042\001\035\001\035\001\000\000\001\001\035\001\035\001\036\001\
\037\001\038\001\039\001\035\001\000\000\001\001\001\001\002\001\
\001\001\046\001\111\000\042\001\113\000\008\001\009\001\001\001\
\000\000\119\000\001\001\001\001\015\001\005\001\006\001\007\001\
\125\000\042\001\010\001\011\001\012\001\013\001\014\001\001\001\
\027\001\028\001\035\001\000\000\137\000\035\001\042\001\041\001\
\035\001\006\001\007\001\001\001\145\000\010\001\011\001\012\001\
\013\001\014\001\001\001\046\001\023\001\034\001\034\001\042\001\
\000\000\003\001\004\001\005\001\006\001\007\001\001\001\019\001\
\010\001\011\001\012\001\013\001\014\001\001\001\016\001\017\001\
\034\001\001\001\035\001\034\001\019\001\034\001\033\001\001\001\
\000\000\035\001\034\001\029\001\030\001\034\001\255\255\000\000\
\035\001\042\001\003\001\004\001\005\001\006\001\007\001\255\255\
\042\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\000\000\255\255\
\255\255\255\255\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\042\001\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\029\001\030\001\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\020\001\020\001\022\001\255\255\
\255\255\025\001\255\255\255\255\000\000\029\001\030\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\020\001\030\001\
\040\001\040\001\042\001\003\001\004\001\005\001\006\001\007\001\
\030\001\040\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\040\001\000\000\020\001\020\001\022\001\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\040\001\040\001\042\001\003\001\004\001\005\001\006\001\007\001\
\000\000\030\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\020\001\040\001\020\001\020\001\022\001\255\255\
\255\255\025\001\255\255\255\255\030\001\029\001\030\001\030\001\
\255\255\255\255\255\255\255\255\000\000\255\255\040\001\020\001\
\040\001\040\001\042\001\003\001\004\001\005\001\006\001\007\001\
\020\001\030\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\030\001\040\001\020\001\255\255\022\001\255\255\
\000\000\025\001\255\255\255\255\040\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\020\001\
\040\001\000\000\042\001\003\001\004\001\005\001\006\001\007\001\
\255\255\030\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\000\000\040\001\020\001\255\255\022\001\255\255\
\000\000\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\003\001\004\001\005\001\000\000\255\255\255\255\
\040\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\000\000\255\255\020\001\255\255\022\001\255\255\255\255\
\025\001\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\003\001\004\001\005\001\255\255\255\255\020\001\040\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\030\001\255\255\020\001\255\255\022\001\255\255\255\255\025\001\
\255\255\255\255\040\001\029\001\030\001\255\255\255\255\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\040\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\255\255\
\255\255\020\001\255\255\022\001\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\003\001\
\004\001\005\001\255\255\255\255\255\255\040\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\255\255\255\255\
\020\001\255\255\022\001\255\255\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\003\001\004\001\
\005\001\255\255\255\255\255\255\040\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\255\255\255\255\020\001\
\255\255\022\001\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\255\255\255\255\
\016\001\017\001\255\255\255\255\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\020\001\255\255\022\001\255\255\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\255\255\255\255\255\255\
\016\001\017\001\255\255\255\255\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\016\001\017\001\255\255\255\255\020\001\255\255\022\001\
\040\001\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\016\001\255\255\255\255\255\255\020\001\255\255\
\022\001\040\001\255\255\025\001\020\001\255\255\022\001\029\001\
\030\001\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\020\001\040\001\022\001\255\255\255\255\025\001\255\255\
\040\001\255\255\029\001\030\001\255\255\020\001\255\255\022\001\
\255\255\255\255\025\001\255\255\255\255\040\001\029\001\030\001\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\255\255\040\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\003\001\004\001\005\001\006\001\007\001\029\001\030\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\255\255\
\255\255\255\255\042\001\255\255\255\255\003\001\004\001\005\001\
\006\001\007\001\029\001\030\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\042\001\
\255\255\255\255\003\001\004\001\005\001\006\001\007\001\029\001\
\030\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\030\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\003\001\004\001\005\001\
\006\001\007\001\255\255\029\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\255\255\003\001\004\001\005\001\
\006\001\007\001\255\255\025\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\022\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  TRUE\000\
  FALSE\000\
  EQ_TOK\000\
  L_TOK\000\
  LE_TOK\000\
  B_TOK\000\
  BE_TOK\000\
  NOT\000\
  AND\000\
  OR\000\
  SKIP\000\
  SET\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  PRINT\000\
  PPRINT\000\
  LPAREN\000\
  COPYFROM\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  QUOTE\000\
  DECLAREINT\000\
  DECLAREPROTO\000\
  DECLAREBOOL\000\
  DECLARESTR\000\
  END\000\
  PERIOD\000\
  DOLLAR\000\
  QUESTION\000\
  READFROM\000\
  WRITETO\000\
  SIZEOF\000\
  EOF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parse.mly"
                (IndexConst(_1))
# 504 "parse.ml"
               : 'index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parse.mly"
                 (IndexIden(_1))
# 511 "parse.ml"
               : 'index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parse.mly"
                                            ( Const(_1) )
# 518 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 85 "parse.mly"
                                             ( Var _1)
# 525 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 86 "parse.mly"
                                           ( Add (_1,_3) )
# 533 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 87 "parse.mly"
                                           ( Sub (_1,_3) )
# 541 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 88 "parse.mly"
                                           ( Mul (_1,_3) )
# 549 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 89 "parse.mly"
                                           ( Div (_1,_3) )
# 557 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 90 "parse.mly"
                                           ( Mod (_1,_3) )
# 565 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pro_ele) in
    Obj.repr(
# 91 "parse.mly"
                                             ( Protoele _1)
# 572 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp_inside) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 92 "parse.mly"
                                                                       (  Sizeof1(_3,_5,_7) )
# 581 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 93 "parse.mly"
                                                     (  Sizeof2(_3,_5) )
# 589 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parse.mly"
                                        ( True )
# 595 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parse.mly"
                                             ( False )
# 601 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 96 "parse.mly"
                                           ( EQ (_1,_3) )
# 609 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 97 "parse.mly"
                                           ( LE(_1,_3) )
# 617 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 98 "parse.mly"
                                           ( L(_1,_3) )
# 625 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 99 "parse.mly"
                                           ( B(_1,_3) )
# 633 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 100 "parse.mly"
                                           ( BE(_1,_3) )
# 641 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 101 "parse.mly"
                                            ( Not(_2) )
# 648 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 102 "parse.mly"
                                           ( And(_1,_3)  )
# 656 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 103 "parse.mly"
                                           ( Or(_1,_3) )
# 664 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 104 "parse.mly"
                                            ( _2 )
# 671 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 105 "parse.mly"
                                             ( Str(_2) )
# 678 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parse.mly"
                                             ( PPrint(_2) )
# 685 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 108 "parse.mly"
                                                              ( HasProto1(_1,_3,_5) )
# 694 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 109 "parse.mly"
                                                              ( HasProto2(_1,_3) )
# 702 "parse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parse.mly"
                                                                      (     AccessProto1(_1,_3,_5) )
# 711 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    Obj.repr(
# 115 "parse.mly"
                                                                        (     AccessProto2(_1,_3,_5,_7) )
# 721 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parse.mly"
                                                     ( AccessProto3(_1,_3) )
# 729 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    Obj.repr(
# 117 "parse.mly"
                                                   ( AccessProto4(_1,_3,_5) )
# 738 "parse.ml"
               : 'pro_ele))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 121 "parse.mly"
                                             ( Set(_1,_3) )
# 746 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pf.com) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pf.com) in
    Obj.repr(
# 123 "parse.mly"
                                             ( Seq(_1,_3) )
# 754 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 124 "parse.mly"
                             ( If(_2,_4) )
# 762 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Pf.com) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 125 "parse.mly"
                                             ( Ifelse(_2,_4,_7) )
# 771 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 126 "parse.mly"
                                             ( While(_2,_4) )
# 779 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parse.mly"
                                             ( Print(_2) )
# 786 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Pf.com) in
    Obj.repr(
# 128 "parse.mly"
                                             ( _2 )
# 793 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parse.mly"
                               ( Declareint(_2) )
# 800 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parse.mly"
                                             ( Declarebool(_2) )
# 807 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 132 "parse.mly"
                                             ( Declarestr(_2) )
# 814 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 133 "parse.mly"
                                                                                          ( Declareproto(_2,_4,_6,_9) )
# 824 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 134 "parse.mly"
                                                ( Readfrom(_1,_4) )
# 832 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 135 "parse.mly"
                                                ( Writeto(_1,_4) )
# 840 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 137 "parse.mly"
                                                                                  ( SetProto1(_1,_3,_5,_7) )
# 850 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'index) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 138 "parse.mly"
                                                                                ( SetProto2(_1,_3,_5,_7,_10) )
# 861 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 139 "parse.mly"
                                                                       ( SetProto3(_1,_3,_5) )
# 870 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'index) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 140 "parse.mly"
                                                                         ( SetProto4(_1,_3,_5,_8) )
# 880 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 142 "parse.mly"
                                                      (AddEle1(_1,_3,_7))
# 889 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 143 "parse.mly"
                                                                        (AddEle2(_1,_3,_5,_9))
# 899 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 144 "parse.mly"
                                                  (AddEle3(_1,_3))
# 907 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp_inside) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 145 "parse.mly"
                                                                     (AddEle4(_1,_3,_5))
# 916 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parse.mly"
                          (Copyfrom(_1, _3))
# 924 "parse.ml"
               : Pf.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parse.mly"
              ( ExpEle1 _1 )
# 931 "parse.ml"
               : 'exp_inside))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'index) in
    Obj.repr(
# 152 "parse.mly"
                                  ( ExpEle2 (_1, _3) )
# 939 "parse.ml"
               : 'exp_inside))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp_inside) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_inside) in
    Obj.repr(
# 153 "parse.mly"
                                       ( ExpEle3 (_1, _3) )
# 947 "parse.ml"
               : 'exp_inside))
(* Entry com *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let com (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pf.com)
